generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id               String     @id @unique @default(uuid()) @map("id")
  authorId         String     @map("author_id")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime?   @updatedAt @map("updated_at")
  publishDate      DateTime?  @map("publish_date")
  status           PostStatus @default(draft)
  originalAuthorId String?    @map("original_author_id")
  originalPostId   String?    @map("original_post_id")
  likesCount       Int        @default(0) @map("likes_count")
  commentsCount    Int        @default(0) @map("comments_count")
  type             PostType
  tags             TagsOnPost[]
  likes            Like[]
  comments         Comment[]
  videoPost        VideoPost?
  textPost         TextPost?
  quotePost        QuotePost?
  imagePost        ImagePost?
  linkPost         LinkPost?

  @@map("posts")
}

model VideoPost {
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId   String @unique @map("post_id")
  name     String
  videoUrl String @map("video_url")

  @@map("video_posts")
}

model TextPost {
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String @unique @map("post_id")
  name      String
  text      String
  anonsText String @map("anons_text")

  @@map("text_posts")
}

model QuotePost {
  post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId      String @unique @map("post_id")
  quote       String
  quoteAuthor String @map("quote_author")

  @@map("quote_posts")
}

model ImagePost {
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId   String @unique @map("post_id")
  imageUrl String @map("image_url")

  @@map("image_posts")
}

model LinkPost {
  post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId      String @unique @map("post_id")
  linkUrl     String @map("link_url")
  description String

  @@map("link_posts")
}

model Tag {
  id      String   @id @unique @default(uuid()) @map("id")
  name    String   @unique
  posts   TagsOnPost[]

  @@index([name])
  @@map("tags")
}

model TagsOnPost {
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String @map("post_id")
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId String @map("tag_id")

  @@id([postId, tagId])
}

model Like {
  id        String   @id @unique @default(uuid()) @map("id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("likes")
}

model Comment {
  id        String   @id @unique @default(uuid()) @map("id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @map("post_id")
  authorId  String   @map("author_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Subscription {
  id        String   @id @unique @default(uuid()) @map("id")
  authorId  String   @map("author_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subscriptions")
}

enum PostStatus {
  draft
  published
  repost
}

enum PostType {
  video
  text
  quote
  image
  link
}
